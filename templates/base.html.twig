<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>{% block title %}TimerApp{% endblock %}</title>
    <link rel="icon" href="/favicon.ico">
    {% block stylesheets %}
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
        <link rel="stylesheet" href="{{ asset('styles/app.css') }}">
    {% endblock %}
</head>
<body>
{% block body %}{% endblock %}
{% block javascripts %}
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script type="text/babel" src="{{ asset('react/utils/HttpClient.js') }}"></script>
    <script src="{{ asset('react/react.development.js') }}"></script>
    <script src="{{ asset('react/react-dom.development.js') }}"></script>
    <script src="{{ asset('react/babel.min.js') }}"></script>

    <script>
        (function syncTokens() {
            const getCookie = (name) => {
                const value = `; ${document.cookie}`;
                const parts = value.split(`; ${name}=`);
                if (parts.length === 2) return parts.pop().split(';').shift();
            };

            const setCookie = (name, value, days = 7) => {
                const expires = new Date(Date.now() + days * 864e5).toUTCString();
                const isSecure = location.protocol === 'https:';
                document.cookie = `${name}=${value}; path=/; expires=${expires}; ${isSecure ? 'Secure;' : ''} SameSite=Strict`;
            };
            const setTokenEverywhere = (access, refresh) => {
                if (access) {
                    localStorage.setItem('accessToken', access);
                    setCookie('accessToken', access);
                }
                if (refresh) {
                    localStorage.setItem('refreshToken', refresh);
                    setCookie('refreshToken', refresh);
                }
            };
            const accessFromStorage = localStorage.getItem('accessToken');
            const refreshFromStorage = localStorage.getItem('refreshToken');
            const accessFromCookie = getCookie('accessToken');
            const refreshFromCookie = getCookie('refreshToken');
            if (!accessFromStorage && accessFromCookie) {
                localStorage.setItem('accessToken', accessFromCookie);
            } else if (accessFromStorage && accessFromStorage !== accessFromCookie) {
                setCookie('accessToken', accessFromStorage);
            }
            if (!refreshFromStorage && refreshFromCookie) {
                localStorage.setItem('refreshToken', refreshFromCookie);
            } else if (refreshFromStorage && refreshFromStorage !== refreshFromCookie) {
                setCookie('refreshToken', refreshFromStorage);
            }
            const originalFetch = window.fetch;
            window.fetch = async (url, options = {}) => {
                const accessToken = localStorage.getItem('accessToken');
                const refreshToken = localStorage.getItem('refreshToken');
                options.headers = {
                    ...(options.headers || {}),
                    ...(accessToken ? { 'access-token': accessToken } : {}),
                    ...(refreshToken ? { 'refresh-token': refreshToken } : {}),
                };
                const response = await originalFetch(url, options);
                const newAccessToken = response.headers.get('access-token');
                const newRefreshToken = response.headers.get('refresh-token');
                if (newAccessToken || newRefreshToken) {
                    setTokenEverywhere(newAccessToken, newRefreshToken);
                }

                return response;
            };
        })();
    </script>

{% endblock %}
</body>
</html>
